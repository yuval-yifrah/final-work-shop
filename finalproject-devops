# Status Page Startup - AWS Architecture Documentation

## Overview
**Budget**: $300/month AWS  
**Application**: Django Status Page with PostgreSQL, Redis, Gunicorn, Nginx  
**Target**: Cost-effective, scalable startup architecture  
**OS**: Amazon Linux 2023

## Infrastructure Components

### Network Layer
```
VPC: 10.0.0.0/16
├── Public Subnet: 10.0.1.0/24 (us-east-1a)
├── Private Subnet: 10.0.2.0/24 (us-east-1a) 
└── Private Subnet: 10.0.3.0/24 (us-east-1b)
```

### Compute & Application
- **EC2 Instance**: t3.small (2 vCPU, 2GB RAM) - $15/month
  - Amazon Linux 2023
  - Auto Scaling Group (min:1, max:3)
  - Django + Gunicorn + Nginx
  - Private subnet deployment

### Database Layer
- **RDS PostgreSQL**: db.t3.micro (1 vCPU, 1GB RAM) - $13/month
  - Multi-AZ deployment
  - 7-day automated backups
  - Private subnet deployment
  - Version: PostgreSQL 14+

### Cache Layer
- **ElastiCache Redis**: cache.t3.micro (1 vCPU, 0.5GB RAM) - $13/month
  - Single node (cluster ready)
  - Private subnet deployment
  - Version: Redis 7.x

### Load Balancer & SSL
- **Application Load Balancer** - $18/month
  - Internet-facing
  - SSL termination via AWS Certificate Manager
  - Health checks and auto-recovery
  - WAF integration ready

### Storage & CDN
- **S3 Bucket**: Standard storage - $5/month
  - Static files, backups, logs
  - Versioning enabled
- **CloudFront CDN** - $10/month
  - Global content delivery
  - HTTPS everywhere
  - Origin: S3 bucket

### Networking Infrastructure
- **Internet Gateway** - Free
- **NAT Gateway** - $32/month (high availability)
- **Route 53 Hosted Zone** - $0.50/month
- **VPC, Subnets, Route Tables** - Free

### Security & Monitoring
- **AWS Certificate Manager** - Free (SSL certificates)
- **CloudWatch** - $10/month (basic monitoring + alarms)
- **AWS WAF** - $15/month (web application firewall)
- **AWS Backup** - $5/month (automated snapshots)
- **CloudTrail** - $2/month (audit logs)

### CI/CD Pipeline
- **CodeCommit** - Free (Git repositories)
- **CodeBuild** - $10/month (build automation)
- **CodeDeploy** - Free (deployment automation)
- **Systems Manager** - Free (configuration management)

## Security Architecture

### Network Security Flow
```
Internet → Internet Gateway → ALB (Public Subnet) → EC2 (Private Subnet) → RDS/Redis (Private Subnet)
```

### Security Groups Configuration
```
ALB-SG:
  Inbound: HTTP(80), HTTPS(443) from 0.0.0.0/0
  Outbound: All traffic

EC2-SG:
  Inbound: Port 8000 from ALB-SG only
  Outbound: HTTPS(443) to 0.0.0.0/0, PostgreSQL(5432) to RDS-SG, Redis(6379) to Redis-SG

RDS-SG:
  Inbound: PostgreSQL(5432) from EC2-SG only
  Outbound: None

Redis-SG:
  Inbound: Redis(6379) from EC2-SG only
  Outbound: None
```

### Access Control
- IAM roles for EC2 instances (no access keys)
- Systems Manager Session Manager for shell access
- Parameter Store for secure configuration
- CloudTrail for audit logging

## Application Configuration

### Django Settings for AWS
```python
import boto3
import os

def get_parameter(name):
    ssm = boto3.client('ssm', region_name='us-east-1')
    response = ssm.get_parameter(Name=name, WithDecryption=True)
    return response['Parameter']['Value']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'statuspage',
        'USER': 'statuspage_admin',
        'PASSWORD': get_parameter('/statuspage/prod/db_password'),
        'HOST': get_parameter('/statuspage/prod/db_host'),
        'PORT': '5432',
        'CONN_MAX_AGE': 300,
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{get_parameter('/statuspage/prod/redis_host')}:6379/1",
    }
}

SECRET_KEY = get_parameter('/statuspage/prod/secret_key')
ALLOWED_HOSTS = [get_parameter('/statuspage/prod/domain_name')]

# S3 Configuration
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
AWS_STORAGE_BUCKET_NAME = get_parameter('/statuspage/prod/s3_bucket')
AWS_S3_REGION_NAME = 'us-east-1'
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
```

### Amazon Linux 2023 Installation Script
```bash
#!/bin/bash
# User Data Script for EC2 Launch

# Update system
sudo dnf update -y

# Install required packages
sudo dnf install -y python3 python3-pip python3-devel gcc \
    libxml2-devel libxslt-devel libffi-devel postgresql-devel \
    openssl-devel nginx git

# Enable nginx
sudo systemctl enable nginx

# Create status-page system user
sudo groupadd --system status-page
sudo useradd --system -g status-page status-page

# Create application directory
sudo mkdir -p /opt/status-page
sudo chown status-page:status-page /opt/status-page

# Install AWS CLI v2
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
rm -rf awscliv2.zip aws/
```

## Cost Breakdown

### Production Environment ($136.50/month)
| Component | Monthly Cost |
|-----------|--------------|
| EC2 t3.small | $15.00 |
| RDS db.t3.micro | $13.00 |
| ElastiCache t3.micro | $13.00 |
| Application Load Balancer | $18.00 |
| NAT Gateway | $32.00 |
| S3 Standard storage | $5.00 |
| CloudFront CDN | $10.00 |
| Route 53 Hosted Zone | $0.50 |
| CloudWatch monitoring | $10.00 |
| AWS WAF | $15.00 |
| AWS Backup | $5.00 |

### Development Environment ($35/month)
| Component | Monthly Cost |
|-----------|--------------|
| EC2 t3.nano | $4.00 |
| RDS db.t3.micro (shared) | $13.00 |
| ElastiCache t3.micro (shared) | $13.00 |
| S3 + misc | $5.00 |

### CI/CD & DevOps ($30/month)
| Component | Monthly Cost |
|-----------|--------------|
| CodeBuild build minutes | $10.00 |
| CloudTrail audit logs | $2.00 |
| Additional monitoring | $18.00 |

### Reserve & Growth Buffer ($98.50/month)
- Unexpected costs and traffic spikes
- Data transfer costs
- Future scaling preparation

**Total Monthly Cost: $300.00**

## High Availability & Scaling

### Current Setup (Phase 1)
- Single EC2 instance with Auto Scaling Group
- Multi-AZ RDS for database availability
- Load balancer health checks
- Supports ~1,000 concurrent users

### Phase 2 Scaling (6+ months, ~$450/month)
- Auto Scaling across multiple AZs
- RDS read replica
- ElastiCache cluster mode
- Supports ~5,000 concurrent users

### Phase 3 Microservices (12+ months, ~$800/month)
- Separate background task instances
- Redis cluster
- Multiple RDS instances
- Supports ~20,000 concurrent users

## Monitoring & Alerting

### CloudWatch Metrics
- EC2: CPU utilization, memory, disk usage
- RDS: CPU, connections, storage, read/write latency
- ALB: Request count, response time, error rates
- ElastiCache: CPU, memory usage, cache hit ratio

### Alert Thresholds
- High CPU usage (>80% for 5 minutes)
- Database connection failures
- Application errors (HTTP 5xx >5% for 2 minutes)
- Low disk space (<20% remaining)
- SSL certificate expiration (30 days warning)

### Log Management
- Application logs → CloudWatch Logs
- Access logs → S3 via ALB
- Error tracking → CloudWatch Insights
- Security logs → CloudTrail

## Backup & Recovery Strategy

### Automated Backups
- **RDS**: Daily automated backups with 7-day retention
- **EC2**: Weekly AMI snapshots via AWS Backup
- **S3**: Versioning enabled + lifecycle policies
- **Configuration**: Infrastructure as Code in Git

### Recovery Procedures
- **RTO (Recovery Time Objective)**: 2 hours
- **RPO (Recovery Point Objective)**: 4 hours
- **Process**: CloudFormation redeploy + data restore from backups

### Disaster Recovery Testing
- Monthly backup restoration tests
- Quarterly full disaster recovery simulation
- Documentation of all recovery procedures

## Security Best Practices

### Network Security
- All database and cache instances in private subnets
- No direct internet access to application servers
- WAF rules for common attack patterns
- Security group restrictions (principle of least privilege)

### Access Control
- No SSH keys required (Systems Manager Session Manager)
- IAM roles with minimal required permissions
- MFA required for all human access
- Regular access audits via CloudTrail

### Data Protection
- All traffic encrypted in transit (HTTPS/TLS)
- Database encryption at rest
- Secrets stored in Parameter Store (encrypted)
- Regular security patches via AWS Systems Manager

### Compliance Considerations
- CloudTrail audit logging enabled
- Data residency controls via region selection
- GDPR compliance via data retention policies
- SOC 2 Type II controls implementation ready

## Cost Optimization Strategies

### Immediate Savings
- Reserved Instances after 3 months (30% savings)
- Development environment shutdown automation (nights/weekends)
- S3 Intelligent Tiering for long-term storage
- CloudWatch log retention policies

### Long-term Optimization
- Spot Instances for non-critical workloads
- Right-sizing based on actual usage patterns
- CDN optimization for static content delivery
- Database query optimization for reduced RDS usage

### Monitoring & Control
- AWS Cost Explorer for usage analysis
- Billing alerts at 80% and 100% of budget
- Monthly cost reviews and optimization
- Resource tagging for cost allocation

## Implementation Timeline

### Week 1: Foundation
- Day 1-2: VPC, security groups, networking
- Day 3-4: RDS and ElastiCache setup
- Day 5: EC2 instance and application deployment

### Week 2: Production Ready
- Day 1-2: Load balancer and SSL configuration
- Day 3: S3 and CloudFront setup  
- Day 4-5: Monitoring, alerts, and security hardening

### Week 3: Automation
- Day 1-3: CI/CD pipeline implementation
- Day 4-5: Auto Scaling and high availability testing

### Week 4: Optimization
- Day 1-2: Performance tuning and optimization
- Day 3-4: Documentation and runbook creation
- Day 5: Final testing and go-live preparation

**Total Implementation Time: 15-20 working days**

## Success Metrics

### Performance Targets
- Page load time: <2 seconds (95th percentile)
- Uptime: 99.9% availability
- Response time: <500ms for API calls
- Error rate: <0.1% for all requests

### Scaling Targets
- Handle 1,000 concurrent users initially
- Scale to 5,000 users within 6 months
- Support 10,000 status page views per day
- Process 1,000 API requests per minute

### Cost Targets
- Stay within $300/month budget for first 6 months
- Achieve <$0.30 per thousand page views
- Maintain <20% cost growth with 100% traffic growth
- ROI positive within 12 months
